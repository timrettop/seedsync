name: CI

on:
  push:
    branches: [master]
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  pull_request:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unittests-python:
    name: Python unit tests
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      # Build package
      - name: Run Python unit tests
        run: make run-tests-python

  unittests-angular:
    name: Angular unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Build package
      - name: Run Angular unit tests
        run: make run-tests-angular

  build-deb:
    name: Build Deb
    runs-on: ubuntu-latest
    needs: [unittests-python, unittests-angular]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
      - name: Show buildx builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Show buildx available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Build package
      - name: Build deb package
        run: make deb

      # Upload package
      - name: Publish artifact
        uses: actions/upload-artifact@v2
        with:
          path: ${{ github.workspace }}/build/*.deb
          name: deb-${{ github.run_number }}

      # Post build steps
      - name: List built packages
        if: ${{ success() }}
        run: ls -l $GITHUB_WORKSPACE/build/

  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [unittests-python, unittests-angular]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
      - name: Show buildx builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Show buildx available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Login using a PAT with write:packages scope
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      # Set staging registry
      - name: Set staging registry env variable
        run: echo "staging_registry=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV

      # Build docker image
      - name: Build docker image
        run: make docker-image STAGING_REGISTRY=${{ env.staging_registry }} STAGING_VERSION=${{ github.run_number }}

  e2etests-deb:
    name: End-to-end tests on Deb
    runs-on: ubuntu-latest
    needs: [build-deb]
    strategy:
      matrix:
        oscode: [ubu1604, ubu1804, ubu2004]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download deb package artifact
        uses: actions/download-artifact@v2
        with:
          name: deb-${{ github.run_number }}
          path: build/

      # Run e2e test
      - name: Run e2e test
        run: make run-tests-e2e SEEDSYNC_DEB=`readlink -f build/*.deb` SEEDSYNC_OS=${{ matrix.oscode }}

  e2etests-docker-image:
    name: End-to-end tests on Docker Image
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    strategy:
      matrix:
        arch: [amd64, arm64, arm/v7]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up build environment
      - name: Enable Docker experimental features
        run: |
          echo $'{\n    "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart
          docker version
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
      - name: Show buildx builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Show buildx available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Login using a PAT with write:packages scope
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      # Set staging registry
      - name: Set staging registry env variable
        run: echo "staging_registry=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV

      # Run e2e test
      - name: Run e2e test
        run: make run-tests-e2e \
          STAGING_REGISTRY=${{ env.staging_registry }} \
          STAGING_VERSION=${{ github.run_number }} \
          SEEDSYNC_ARCH=${{ matrix.arch }}

  publish-docker-image:
    name: Publish Docker Image
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [e2etests-deb, e2etests-docker-image]
    steps:
      - name: Set release env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2

      # Sets up build environment
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host
      - name: Show buildx builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Show buildx available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      # Login to GHCR using a PAT with write:packages scope
      - name: Log into GitHub Container Registry
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin
      # Login to Dockerhub
      - name: Log into Dockerhub registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" |
          docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      # Set staging registry
      - name: Set staging registry env variable
        run: echo "staging_registry=ghcr.io/${{ github.repository }}" >> $GITHUB_ENV

      # Push image to dockerhub
      - name: Push to Dockerhub (tag vX.X.X)
        run: make docker-image-release \
          STAGING_REGISTRY=${{ env.staging_registry }} \
          STAGING_VERSION=${{ github.run_number }} \
          RELEASE_REGISTRY=docker.io/ianworley \
          RELEASE_VERSION=${{ env.RELEASE_VERSION }}
      - name: Push to Dockerhub (tag latest)
        run: make docker-image-release \
          STAGING_REGISTRY=${{ env.staging_registry }} \
          STAGING_VERSION=${{ github.run_number }} \
          RELEASE_REGISTRY=docker.io/ianworley \
          RELEASE_VERSION=latest

  publish-deb:
    name: Publish Deb package
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [e2etests-deb, e2etests-docker-image]
    steps:
      - name: Set release env variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Download deb package artifact
        uses: actions/download-artifact@v2
        with:
          name: deb-${{ github.run_number }}
          path: build/
      - name: Set deb file path and name env variable
        run: |
          echo "DEB_PATH=$(readlink -f ./build/*.deb)" >> $GITHUB_ENV
          echo "DEB_NAME=$(basename $(readlink -f ./build/*.deb))" >> $GITHUB_ENV
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.DEB_PATH }}
          asset_name: ${{ env.DEB_NAME }}
          asset_content_type: application/x-deb
